service: items-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:  
    tableName: items
    inventoryTableName: inventory


  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:

  ########################### Shopping list functions ###########################

  create:
    handler: create.main
    events:
      - http:
          path: items
          method: post
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: items/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /items
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: items
          method: get
          cors: true
          authorizer: aws_iam         
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /items/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: items/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /items/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: items/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  ########################### Shopping list functions ###########################

  createinventory:
    handler: createinventory.main
    events:
      - http:
          path: inventory
          method: post
          cors: true
          authorizer: aws_iam
  getinventory:
    handler: getinventory.main
    events:
      - http:
          path: inventory/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listinventory:
    handler: listinventory.main
    events:
      - http:
          path: inventory
          method: get
          cors: true
          authorizer: aws_iam
  deleteinventory:
    handler: deleteinventory.main
    events:
      - http:
          path: inventory/{id}
          method: delete
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}